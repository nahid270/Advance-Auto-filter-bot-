# =====================================================================================
# ||                  GODFATHER MOVIE BOT (Smart Search & Suggestions)               ||
# ||---------------------------------------------------------------------------------||
# || ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö, ‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶® ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ, ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü, ‡¶Ö‡¶ü‡ßã-‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶∏‡¶π ‡¶ö‡ßÇ‡ßú‡¶æ‡¶®‡ßç‡¶§ ‡¶∏‡¶Ç‡¶∏‡ßç‡¶ï‡¶∞‡¶£‡•§      ||
# =====================================================================================

import os
import re
import base64
import logging
import asyncio
from dotenv import load_dotenv
from threading import Thread

# --- ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ì ‡¶¨‡¶ü ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ---
from flask import Flask
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors import MessageNotModified, MessageIdInvalid
from pymongo import MongoClient
from bson.objectid import ObjectId

# --- ‡¶ß‡¶æ‡¶™ ‡ßß: ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ---
load_dotenv()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
LOGGER = logging.getLogger(__name__)

# --- ‡¶ß‡¶æ‡¶™ ‡ß®: ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶≤‡ßã‡¶° ---
try:
    API_ID = int(os.environ.get("API_ID"))
    API_HASH = os.environ.get("API_HASH")
    BOT_TOKEN = os.environ.get("BOT_TOKEN")
    MONGO_URL = os.environ.get("MONGO_URL")
    AD_PAGE_URL = os.environ.get("AD_PAGE_URL")
    ADMIN_IDS = [int(id.strip()) for id in os.environ.get("ADMIN_IDS", "").split(',')]
    PORT = int(os.environ.get("PORT", 8080))
    BOT_USERNAME = os.environ.get("BOT_USERNAME")
    DELETE_DELAY = 15 * 60
except (ValueError, TypeError) as e:
    LOGGER.critical(f"Configuration error: {e}")
    exit()

# --- ‡¶ß‡¶æ‡¶™ ‡ß©: ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü, ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶è‡¶¨‡¶Ç ‡¶ì‡ßü‡ßá‡¶¨ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶® ---
app = Client("MovieBot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)
mongo_client = MongoClient(MONGO_URL)
db = mongo_client["MovieDB"]
movies = db["movies"]
users = db["users"]
channels = db["channels"]

web_app = Flask(__name__)
@web_app.route('/')
def health_check(): return "Bot is alive!"

# ========= üìÑ ‡¶π‡ßá‡¶≤‡ßç‡¶™‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ========= #
def is_admin(user_id): return user_id in ADMIN_IDS

async def delete_messages_after_delay(messages, delay):
    await asyncio.sleep(delay)
    for msg in messages:
        try: await msg.delete()
        except Exception as e: LOGGER.warning(f"Could not delete message {msg.id}: {e}")

# ... (save_movie, start_handler, ‡¶è‡¶¨‡¶Ç ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶ï‡ßã‡¶° ‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá) ...
# ========= üì¢ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡ßü‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡ßü ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶∏‡ßá‡¶≠ ========= #
@app.on_message(filters.channel & (filters.video | filters.document))
async def save_movie(client, message):
    if not channels.find_one({"_id": message.chat.id}): return
    text_to_parse = message.caption or ""
    title_match = re.search(r"(.+?)\s*\(?(\d{4})\)?", text_to_parse)
    if not title_match:
        LOGGER.warning(f"Could not parse title from message {message.id} in channel {message.chat.id}")
        return
    title = re.sub(r'[\.\_]', ' ', title_match.group(1).strip())
    year = title_match.group(2)
    languages = ["Hindi", "Bangla", "English", "Tamil", "Telugu", "Malayalam", "Kannada"]
    language = "Unknown"
    for lang in languages:
        if lang.lower() in text_to_parse.lower():
            language = lang
            break
    file_id = message.video.file_id if message.video else message.document.file_id
    data = {"title": title, "year": year, "language": language, "file_id": file_id, "chat_id": message.chat.id, "msg_id": message.id}
    if not movies.find_one({"title": title, "year": year}):
        movies.insert_one(data)
        LOGGER.info(f"‚úÖ Movie Saved: {title} ({year}) from channel {message.chat.id}")

# ========= üé¨ ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶è‡¶¨‡¶Ç ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ========= #
@app.on_message(filters.private & filters.command("start"))
async def start_handler(client, message):
    user_id = message.from_user.id
    if not users.find_one({"_id": user_id}):
        users.insert_one({"_id": user_id, "name": message.from_user.first_name})
        LOGGER.info(f"New user saved: {user_id}")

    if len(message.command) > 1:
        try:
            payload = message.command[1]
            decoded_data = base64.urlsafe_b64decode(payload).decode()
            movie_id_str, verified_user_id_str = decoded_data.split('-')
            
            if user_id != int(verified_user_id_str):
                return await message.reply_text("üò° **Verification Failed!** This link was not generated for you.")

            movie = movies.find_one({"_id": ObjectId(movie_id_str)})
            if movie:
                final_caption = (f"üé¨ **{movie['title']} ({movie['year']})**\n"
                                 f"üåê **Language:** {movie['language']}\n\n"
                                 f"üôè Thank you for using our bot!")
                movie_msg = await client.copy_message(chat_id=user_id, from_chat_id=movie['chat_id'], message_id=movie['msg_id'], caption=final_caption)
                warning_msg = await message.reply_text(f"‚ùó **Important:** This file will be automatically deleted in **{DELETE_DELAY // 60} minutes**.", quote=True)
                asyncio.create_task(delete_messages_after_delay([movie_msg, warning_msg], DELETE_DELAY))
            else:
                await message.reply_text("‚ùå Sorry, the movie could not be found.")
        except Exception as e:
            LOGGER.error(f"Deep link error for user {user_id}: {e}")
            await message.reply_text("ü§î Invalid or expired verification link.")
    else:
        await message.reply_text(f"üëã Hello, **{message.from_user.first_name}**!\n\nI am a movie search bot. Just send me the name of the movie you want to find.")

# ========= üõ†Ô∏è ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶∏ ========= #
@app.on_message(filters.command("stats") & filters.create(lambda _, __, m: is_admin(m.from_user.id)))
async def stats_command(_, message):
    total_users = users.count_documents({})
    total_movies = movies.count_documents({})
    total_channels = channels.count_documents({})
    await message.reply_text(f"üìä **Bot Statistics**\n\nüë• Total Users: `{total_users}`\nüé¨ Total Movies: `{total_movies}`\nüì¢ Authorized Channels: `{total_channels}`")

# ... (‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§) ...


# ========= üîé ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶® ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ (‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶§‡ßÅ‡¶®) ========= #
@app.on_message((filters.private | filters.group) & filters.text & ~filters.command())
async def smart_search_movie(client, message):
    query = message.text.strip()
    
    # Atlas Search ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶ï‡ßã‡ßü‡ßá‡¶∞‡¶ø ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã
    pipeline = [
        {
            '$search': {
                'index': 'default', # ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ø‡ßá ‡¶á‡¶®‡¶°‡ßá‡¶ï‡ßç‡¶∏‡¶ü‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø
                'autocomplete': {
                    'query': query,
                    'path': 'title',
                    'fuzzy': { 'maxEdits': 2, 'prefixLength': 3 }
                }
            }
        },
        { '$limit': 5 } # ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡ß´‡¶ü‡¶ø ‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá
    ]
    results = list(movies.aggregate(pipeline))

    if not results:
        if message.chat.type == filters.ChatType.PRIVATE:
            await message.reply_text("‚ùå **Movie Not Found!**\n\nPlease check your spelling or try a different name.")
        return

    # ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá‡¶ü‡¶ø ‡¶π‡ßÅ‡¶¨‡¶π‡ßÅ ‡¶Æ‡¶ø‡¶≤‡ßá ‡¶Ø‡¶æ‡ßü
    if len(results) == 1 and results[0]['title'].lower() == query.lower():
        movie = results[0]
        movie_id = str(movie['_id'])
        user_id = message.from_user.id
        encoded_data = base64.urlsafe_b64encode(f'get_{movie_id}-{user_id}'.encode()).decode()
        # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá 'get_' ‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶Ø‡¶æ‡¶§‡ßá ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶®‡¶´‡ßç‡¶≤‡¶ø‡¶ï‡ßç‡¶ü ‡¶®‡¶æ ‡¶π‡ßü
        verification_url = f"https://t.me/{BOT_USERNAME}?start={encoded_data}"
        
        btn = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶®‡¶æ‡¶ì", url=verification_url)]])
        await message.reply_text(
            f"üé¨ **{movie['title']} ({movie['year']})**\n"
            f"üåê **Language:** {movie['language']}\n\n"
            "‚û°Ô∏è ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶ü‡¶ø ‡¶™‡ßá‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
            reply_markup=btn,
            disable_web_page_preview=True,
            quote=True
        )
    else:
        # ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶¨‡¶æ ‡¶≠‡ßÅ‡¶≤ ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
        buttons = []
        for movie in results:
            movie_id = str(movie['_id'])
            # ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶°‡ßá‡¶ü‡¶æ‡ßü ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
            buttons.append([InlineKeyboardButton(f"üé¨ {movie['title']} ({movie['year']})", callback_data=f"suggest_{movie_id}")])
        
        reply_markup = InlineKeyboardMarkup(buttons)
        await message.reply_text("ü§î Did you mean one of these?", reply_markup=reply_markup, quote=True)

# ========= üëÜ ‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶® ‡¶¨‡¶æ‡¶ü‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (‡¶®‡¶§‡ßÅ‡¶®) ========= #
@app.on_callback_query(filters.regex(r"^suggest_"))
async def suggestion_callback(client, callback_query):
    movie_id = callback_query.data.split("_")[1]
    movie = movies.find_one({"_id": ObjectId(movie_id)})

    if not movie:
        await callback_query.answer("Sorry, this movie is no longer available.", show_alert=True)
        return

    # ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡¶æ‡¶ü‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    user_id = callback_query.from_user.id
    encoded_data = base64.urlsafe_b64encode(f'get_{movie_id}-{user_id}'.encode()).decode()
    verification_url = f"https://t.me/{BOT_USERNAME}?start={encoded_data}"
    
    btn = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶®‡¶æ‡¶ì", url=verification_url)]])
    await callback_query.message.edit_text(
        f"üé¨ **{movie['title']} ({movie['year']})**\n"
        f"üåê **Language:** {movie['language']}\n\n"
        "‚û°Ô∏è ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶ü‡¶ø ‡¶™‡ßá‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        reply_markup=btn,
        disable_web_page_preview=True
    )
    await callback_query.answer()


# ========= ‚ñ∂Ô∏è ‡¶¨‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ========= #
def run_web_server():
    web_app.run(host='0.0.0.0', port=PORT)

if __name__ == "__main__":
    LOGGER.info("Starting web server...")
    web_thread = Thread(target=run_web_server)
    web_thread.start()
    
    LOGGER.info("The Don is waking up...")
    app.run()
    LOGGER.info("The Don is resting...")
